var searchIndex = JSON.parse('{\
"task_local":{"doc":"Have you ever thought <em>“Dang! I sure would love to use </em>…","t":[13,13,3,4,3,3,8,24,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Locked","NoValue","Storage","StorageError","StorageIter","StorageIterMut","TaskLocal","TaskLocal","TaskLocalFuture","WithLocalExt","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","fmt","from","from","from","from","from","into","into","into","into","into","into_future","into_iter","into_iter","is_terminated","key","local","local_chain","local_chain_mut","local_mut","new","next","next","poll","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_local","try_local_chain","try_local_chain_mut","try_local_mut","try_poll","type_id","type_id","type_id","type_id","type_id","with_local"],"q":["task_local","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The storage cannot be accessed because it is currently …","There is no value in storage. This means that you are not …","An opaque type used to hold and facilitate access to the …","An error that is returned from the <code>TaskLocal::try_*</code> …","An iterator that yields references to all the currently …","An iterator that yields mutable references to all the …","Implementing this trait allows the type to be used with …","This takes care of implementing <code>TaskLocal</code> by setting up …","A <code>Future</code> type that wraps another <code>Future</code> and stores a local …","An extension type for <code>Future</code>s to annotate them with a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","This returns a reference to the thread-local key that will …","This method will call the function with a reference to the …","This method will call the function with an iterator …","This method will call the function with an iterator …","This method will call the function with a mutable …","Constructs the type with the given <code>Future</code> and local value.","","","","","","","","","","","","","","","This method attempts to call the function with a reference …","This method attempts to call the function with an iterator …","This method attempts to call the function with an iterator …","This method attempts to call the function with a mutable …","","","","","","","This will construct a <code>Future</code> type that stores this value …"],"i":[1,1,0,0,0,0,0,0,0,0,2,3,4,1,5,2,3,4,1,5,1,1,4,1,2,3,4,1,5,2,3,4,1,5,5,2,3,5,6,6,6,6,6,5,2,3,5,1,2,3,4,1,5,2,3,4,1,5,6,6,6,6,5,2,3,4,1,5,7],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["storageerror",4]],["storageerror",4]],[[["",0],["",0]]],[[],["storage",3]],[[["storageerror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tasklocalfuture",3]],["bool",0]],[[],["localkey",3]],[[]],[[]],[[]],[[]],[[],["tasklocalfuture",3]],[[["storageiter",3]],["option",4]],[[["storageitermut",3]],["option",4]],[[["pin",3,[["tasklocalfuture",3]]],["context",3]],["poll",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["storageerror",4]]]],[[],["result",4,[["storageerror",4]]]],[[],["result",4,[["storageerror",4]]]],[[],["result",4,[["storageerror",4]]]],[[["pin",3],["context",3]],["poll",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["tasklocal",8]],["tasklocalfuture",3,[["tasklocal",8]]]]],"p":[[4,"StorageError"],[3,"StorageIter"],[3,"StorageIterMut"],[3,"Storage"],[3,"TaskLocalFuture"],[8,"TaskLocal"],[8,"WithLocalExt"]]},\
"task_local_macros":{"doc":"This crate provides a derive macro for the task-local …","t":[24],"n":["TaskLocal"],"q":["task_local_macros"],"d":[""],"i":[0],"f":[null],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
